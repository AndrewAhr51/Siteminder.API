// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Siteminder.API.DbContexts;

namespace Siteminder.API.Migrations
{
    [DbContext(typeof(SiteminderContext))]
    partial class SiteminderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Siteminder.API.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8dd0fdb-8550-43de-acda-b1bdad9ecd9c"),
                            Description = "Proprietary card type",
                            Name = "Proprietary"
                        },
                        new
                        {
                            Id = new Guid("bfc9d58f-b8e9-465a-85d5-d4fce918ad44"),
                            Description = "Credit card type",
                            Name = "Credit"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.AssignedTerminals", b =>
                {
                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TerminalId", "AccountId");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("AssignedTerminals");
                });

            modelBuilder.Entity("Siteminder.API.Entities.AuthorizedCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HoldAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AuthorizedCard");
                });

            modelBuilder.Entity("Siteminder.API.Entities.CardType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<bool>("IsPrivateAccount")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("CardTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e173d24-3094-4853-a8ed-01c54068c8d2"),
                            Description = "Mastercard card type",
                            IsPrivateAccount = false,
                            Name = "Mastercard"
                        },
                        new
                        {
                            Id = new Guid("77eb2e55-7e74-4288-9f10-28d4035a3081"),
                            Description = "Visa card Type",
                            IsPrivateAccount = false,
                            Name = "Visa"
                        },
                        new
                        {
                            Id = new Guid("d38c2488-bc3f-44fb-9725-b3e6cafbc4e0"),
                            Description = "ComData Card Type",
                            IsPrivateAccount = false,
                            Name = "ComData"
                        },
                        new
                        {
                            Id = new Guid("b93cf5d1-a662-48db-8351-be0c0888cc0e"),
                            Description = "Discover Card Type",
                            IsPrivateAccount = false,
                            Name = "Discover"
                        },
                        new
                        {
                            Id = new Guid("6bb4854a-81de-41a1-b1c7-cc1864a2d0d6"),
                            Description = "American Express Card Type",
                            IsPrivateAccount = false,
                            Name = "American Express"
                        },
                        new
                        {
                            Id = new Guid("f31ebc17-09a0-4ce8-873f-9195420dd4da"),
                            Description = "Proprietary Card Type",
                            IsPrivateAccount = false,
                            Name = "Proprietary"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Address1 = "101 Main Street",
                            Address2 = "",
                            City = "Los Angeles",
                            Name = "Andrew's Fuel",
                            State = "CA",
                            Type = "Airport",
                            ZipCode = "11111"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b36"),
                            Address1 = "201 Main Street",
                            Address2 = "",
                            City = "Oklahoma City",
                            Name = "Danny's Fuel",
                            State = "OK",
                            Type = "Airport",
                            ZipCode = "22222"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b37"),
                            Address1 = "301 Main Street",
                            Address2 = "",
                            City = "Detroit",
                            Name = "Jacks Fuel",
                            State = "MI",
                            Type = "Airport",
                            ZipCode = "33333"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b38"),
                            Address1 = "401 Main Street",
                            Address2 = "",
                            City = "Cleveland",
                            Name = "Dan's Fuel",
                            State = "OH",
                            Type = "Airport",
                            ZipCode = "44444-4444"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b39"),
                            Address1 = "501 Main Street",
                            Address2 = "",
                            City = "Parsippany",
                            Name = "Matt's Fuel",
                            State = "NJ",
                            Type = "Airport",
                            ZipCode = "55555-5555"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b40"),
                            Address1 = "601 Main Street",
                            Address2 = "",
                            City = "New York",
                            Name = "Greg's Fuel",
                            State = "NY",
                            Type = "Airport",
                            ZipCode = "66666-66"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b41"),
                            Address1 = "701 Main Street",
                            Address2 = "",
                            City = "Boulder",
                            Name = "Dallas' Fuel",
                            State = "CO",
                            Type = "Airport",
                            ZipCode = "77777-77"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b42"),
                            Address1 = "801 Main Street",
                            Address2 = "",
                            City = "Port Jefferson",
                            Name = "Chris'' Fuel",
                            State = "NY",
                            Type = "Airport",
                            ZipCode = "11777"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.CompanyCards", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyId", "CardId");

                    b.ToTable("CompanyCards");
                });

            modelBuilder.Entity("Siteminder.API.Entities.CompanyContacts", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyId", "ContactId");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Siteminder.API.Entities.CompanySiteTypes", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SiteTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyId", "SiteTypeId");

                    b.ToTable("CompanySiteTypes");

                    b.HasData(
                        new
                        {
                            CompanyId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b42"),
                            SiteTypeId = new Guid("e28888e9-2ba9-473a-a40f-e38cb54f9b35")
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Siteminder.API.Entities.ContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab406afc-4b10-4d9c-b2d6-13791af12af5"),
                            Description = "Company contact type",
                            Type = "Company"
                        },
                        new
                        {
                            Id = new Guid("5c80c4c0-9100-4972-8d93-958c4bf101ff"),
                            Description = "Site contact type",
                            Type = "Site"
                        },
                        new
                        {
                            Id = new Guid("43e40f5e-698b-4621-ad07-6d73cea9c624"),
                            Description = "Site contact type",
                            Type = "Terminal"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.CustomerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AccountingCodeRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPerGallon")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbossedNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalAccountReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TailNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CustomerAccounts");
                });

            modelBuilder.Entity("Siteminder.API.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Siteminder.API.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Gallons")
                        .HasColumnType("int");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Siteminder.API.Entities.Dispenser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DispenserId")
                        .HasColumnType("int")
                        .HasMaxLength(2);

                    b.Property<string>("DispenserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FuelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HVDisplayNumber")
                        .HasColumnType("int");

                    b.Property<int>("MaxTotalizerDigits")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PulserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalizerReading")
                        .HasColumnType("int");

                    b.Property<Guid>("VolumeUnit")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TerminalId");

                    b.ToTable("Dispensers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e214f64-5c9a-4249-9328-f76d330f98fa"),
                            DispenserId = 1,
                            DispenserType = "PIE Box",
                            FuelId = new Guid("6513569b-e36b-413f-921e-c56d04011d14"),
                            HVDisplayNumber = 0,
                            MaxTotalizerDigits = 9,
                            Name = "100 LL",
                            PulserType = "Default",
                            ScheduleId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TerminalId = new Guid("08a028cb-4318-4555-9dea-17ec0ad31b76"),
                            TotalizerReading = 1000,
                            VolumeUnit = new Guid("89dfe007-4503-408a-8adb-8b19a91cf290")
                        },
                        new
                        {
                            Id = new Guid("06c6d1a3-91a6-44ec-82a2-a29d4e3ec81b"),
                            DispenserId = 2,
                            DispenserType = "PIE Box",
                            FuelId = new Guid("6513569b-e36b-413f-921e-c56d04011d15"),
                            HVDisplayNumber = 0,
                            MaxTotalizerDigits = 9,
                            Name = "Jet A",
                            PulserType = "Default",
                            ScheduleId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TerminalId = new Guid("08a028cb-4318-4555-9dea-17ec0ad31b76"),
                            TotalizerReading = 1000,
                            VolumeUnit = new Guid("89dfe007-4503-408a-8adb-8b19a91cf290")
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.DispenserTankAssociation", b =>
                {
                    b.Property<Guid>("DispenserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TankId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DispenserId", "TankId");

                    b.ToTable("DispenserTankAssociations");

                    b.HasData(
                        new
                        {
                            DispenserId = new Guid("06c6d1a3-91a6-44ec-82a2-a29d4e3ec81b"),
                            TankId = new Guid("d741b92c-9383-4124-ab35-00aac3e0c738")
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.DispenserType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<Guid?>("DispenserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("DispenserId");

                    b.ToTable("DispenserType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e214f64-5c9a-4249-9328-f76d330f98fa"),
                            Description = "Dispenser type PIE Box",
                            Name = "PIE Box"
                        },
                        new
                        {
                            Id = new Guid("a1c09103-55ec-461e-af62-d2dfe5046a17"),
                            Description = "Dispenser type Dresser-Wayne",
                            Name = "Dresser-Wayne"
                        },
                        new
                        {
                            Id = new Guid("5f348e7f-c0d0-45fc-a2f5-798b0f1e2bcf"),
                            Description = "Dispenser type Tokheim",
                            Name = "Tokheim"
                        },
                        new
                        {
                            Id = new Guid("af990478-970d-48bb-a863-bf374b64402a"),
                            Description = "Dispenser type DPI",
                            Name = "DPI"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Fuel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("Fuel");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6513569b-e36b-413f-921e-c56d04011d14"),
                            Description = "This is the Jet A Fuel",
                            FuelTypeId = new Guid("6513569b-e36b-413f-921e-c56d04011d14"),
                            Name = "Jet A"
                        },
                        new
                        {
                            Id = new Guid("6513569b-e36b-413f-921e-c56d04011d15"),
                            Description = "This is the AVS Fuel A Fuel",
                            FuelTypeId = new Guid("5fbf8365-ef8a-4975-b939-90d5f507a1d1"),
                            Name = "AVS Fuel A"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b41"),
                            Description = "This is the Jet B Fuel",
                            FuelTypeId = new Guid("6513569b-e36b-413f-921e-c56d04011d14"),
                            Name = "Jet B"
                        },
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b45"),
                            Description = "This is the Regular Unleaded Fuel",
                            FuelTypeId = new Guid("8a4a97f0-df35-4d4a-be7e-ba40590b432b"),
                            Name = "Regular Unleaded"
                        },
                        new
                        {
                            Id = new Guid("0ae33d16-253f-4436-808c-a797b1d5e389"),
                            Description = "This is the Premium Unleaded Fuel",
                            FuelTypeId = new Guid("8a4a97f0-df35-4d4a-be7e-ba40590b432b"),
                            Name = "Premium Unleaded"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.FuelBlocking", b =>
                {
                    b.Property<Guid>("FuelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FuelId", "AccountId");

                    b.ToTable("FuelBlocking");
                });

            modelBuilder.Entity("Siteminder.API.Entities.FuelPump", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<Guid?>("FuelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.HasIndex("TerminalId");

                    b.ToTable("FuelPump");
                });

            modelBuilder.Entity("Siteminder.API.Entities.FuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FuelPumpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FuelPumpId");

                    b.ToTable("FuelType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6513569b-e36b-413f-921e-c56d04011d14"),
                            Description = "Jet Fuel type",
                            Name = "Jet"
                        },
                        new
                        {
                            Id = new Guid("5fbf8365-ef8a-4975-b939-90d5f507a1d1"),
                            Description = "AVSFuel fuel Type",
                            Name = "AVSFuel"
                        },
                        new
                        {
                            Id = new Guid("8a4a97f0-df35-4d4a-be7e-ba40590b432b"),
                            Description = "Unleaded fuel Type",
                            Name = "Unleaded"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("273e1214-1742-4d01-b4d9-382da2548947"),
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("7bc3e576-874f-4257-9f62-11c6e097fbb5"),
                            Name = "QT Administrator"
                        },
                        new
                        {
                            Id = new Guid("195073e4-3503-40a1-ba0d-126811b44566"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("352485aa-2436-4912-85e8-32d124374eb8"),
                            ScheduleName = "Weekly",
                            TerminalId = new Guid("08a028cb-4318-4555-9dea-17ec0ad31b76")
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.ScheduleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDetail");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78414ab8-da92-44f1-b191-c61849cb3563"),
                            CloseTime = new DateTime(2020, 1, 10, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Monday",
                            OpenTime = new DateTime(2020, 1, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleId = new Guid("352485aa-2436-4912-85e8-32d124374eb8")
                        },
                        new
                        {
                            Id = new Guid("f5d408ff-d24f-40a1-85f5-8f6bf4ddcd15"),
                            CloseTime = new DateTime(2020, 1, 10, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Tuesday",
                            OpenTime = new DateTime(2020, 1, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleId = new Guid("352485aa-2436-4912-85e8-32d124374eb8")
                        },
                        new
                        {
                            Id = new Guid("f861f7c0-055a-49c6-b3bc-12a6f662222a"),
                            CloseTime = new DateTime(2020, 1, 10, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Wednesday",
                            OpenTime = new DateTime(2020, 1, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleId = new Guid("352485aa-2436-4912-85e8-32d124374eb8")
                        },
                        new
                        {
                            Id = new Guid("0e798f1a-3c56-4efe-adcf-a98eeefa2c79"),
                            CloseTime = new DateTime(2020, 1, 10, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Thursday",
                            OpenTime = new DateTime(2020, 1, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleId = new Guid("352485aa-2436-4912-85e8-32d124374eb8")
                        },
                        new
                        {
                            Id = new Guid("da4bf274-87e1-464a-8272-d6db715012c2"),
                            CloseTime = new DateTime(2020, 1, 10, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Friday",
                            OpenTime = new DateTime(2020, 1, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleId = new Guid("352485aa-2436-4912-85e8-32d124374eb8")
                        },
                        new
                        {
                            Id = new Guid("64efec51-6d9e-4f04-b1da-96f2a10e5d95"),
                            CloseTime = new DateTime(2020, 1, 10, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Saturday",
                            OpenTime = new DateTime(2020, 1, 10, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleId = new Guid("352485aa-2436-4912-85e8-32d124374eb8")
                        },
                        new
                        {
                            Id = new Guid("39b1e940-5eb8-418d-8067-7f1b4f54c736"),
                            CloseTime = new DateTime(2020, 1, 10, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Sunday",
                            OpenTime = new DateTime(2020, 1, 10, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduleId = new Guid("352485aa-2436-4912-85e8-32d124374eb8")
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("SiteTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SiteTypeId");

                    b.ToTable("Site");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4facfa8e-0008-450b-8022-abe7566dc50f"),
                            Address1 = "110 Main Street",
                            City = "Port Jefferson",
                            CompanyId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b42"),
                            SiteName = "Port Jefferson Marina",
                            SiteTypeId = new Guid("e28888e9-2ba9-473a-a40f-e38cb54f9b36"),
                            State = "NY",
                            ZipCode = "11778"
                        },
                        new
                        {
                            Id = new Guid("c45028a6-9887-481f-8167-79518dccc886"),
                            Address1 = "110 Broadway",
                            City = "Denver",
                            CompanyId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b41"),
                            SiteName = "Denver Marina Marina",
                            SiteTypeId = new Guid("e28888e9-2ba9-473a-a40f-e38cb54f9b36"),
                            State = "CO",
                            ZipCode = "80028"
                        },
                        new
                        {
                            Id = new Guid("5f9d7f91-2a5d-4424-bf81-4ee0e0a6dbde"),
                            Address1 = "500 50 Acre Rd",
                            City = "Smithtown",
                            CompanyId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b40"),
                            SiteName = "Smithtown Marina",
                            SiteTypeId = new Guid("e28888e9-2ba9-473a-a40f-e38cb54f9b36"),
                            State = "NY",
                            ZipCode = "11787"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.SiteContacts", b =>
                {
                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SiteId", "ContactId");

                    b.ToTable("SiteContacts");
                });

            modelBuilder.Entity("Siteminder.API.Entities.SiteType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SiteType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Description = "Airport site type",
                            Type = "Airport"
                        },
                        new
                        {
                            Id = new Guid("e28888e9-2ba9-473a-a40f-e38cb54f9b36"),
                            Description = "Marina site type",
                            Type = "Marina"
                        },
                        new
                        {
                            Id = new Guid("e28888e9-2ba9-473a-a40f-e38cb54f9b37"),
                            Description = "Taxi site type",
                            Type = "Taxi"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Tank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlarmPoint")
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasColumnType("int")
                        .HasMaxLength(1500);

                    b.Property<Guid>("DispenserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DispenserId");

                    b.ToTable("Tank");
                });

            modelBuilder.Entity("Siteminder.API.Entities.TankFuelAssociation", b =>
                {
                    b.Property<Guid>("TankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FuelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TankId", "FuelId");

                    b.ToTable("TankFuelAssociations");

                    b.HasData(
                        new
                        {
                            TankId = new Guid("d741b92c-9383-4124-ab35-00aac3e0c738"),
                            FuelId = new Guid("6513569b-e36b-413f-921e-c56d04011d14")
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Terminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TerminalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Terminal");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08a028cb-4318-4555-9dea-17ec0ad31b76"),
                            SiteId = new Guid("c45028a6-9887-481f-8167-79518dccc886"),
                            TerminalName = "Port Jefferson Terminal"
                        },
                        new
                        {
                            Id = new Guid("691f7447-ab56-4821-a193-46e6a055192f"),
                            SiteId = new Guid("5f9d7f91-2a5d-4424-bf81-4ee0e0a6dbde"),
                            TerminalName = "Smithtown Terminal"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.TerminalContacts", b =>
                {
                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TerminalId", "ContactId");

                    b.ToTable("TerminalContacts");
                });

            modelBuilder.Entity("Siteminder.API.Entities.TerminalDispenserAssociation", b =>
                {
                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DispenserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TerminalId", "DispenserId");

                    b.ToTable("TerminalDispenserTankAssociations");
                });

            modelBuilder.Entity("Siteminder.API.Entities.TerminalSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ATGBaudRate")
                        .HasColumnType("int");

                    b.Property<string>("ATGDataBits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ATGHandshake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ATGParity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ATGPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ATGSecurityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ATGStopBits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AmountOfFillupKey")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AutoTankGuaging")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarcodeReaderPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BatchCloseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CCPlatform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CummulativeRiskAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DPIPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisableFillupKey")
                        .HasColumnType("bit");

                    b.Property<bool>("ForceRegistry")
                        .HasColumnType("bit");

                    b.Property<string>("HVDPOrt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeartlandCompanyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeartlandDeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeartlandTerminalLocationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSAMechantNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSAPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSATerminalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSAUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSTSMerchantAccountID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSTSMerchantJobberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaximumSaleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxiumumOfflineAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("OfflineSalesOption")
                        .HasColumnType("bit");

                    b.Property<string>("PIEPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrintPvtAccountBalanceOnReceipt")
                        .HasColumnType("bit");

                    b.Property<int>("ProprietaryCardCode")
                        .HasColumnType("int");

                    b.Property<string>("QTGatewayAccessCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QTGatewayTerminalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistryLabelAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistryMaxLength")
                        .HasColumnType("int");

                    b.Property<int>("RegistryMinLength")
                        .HasColumnType("int");

                    b.Property<bool>("RejectUnregisteredNonPrivateCardUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("RejectUnregisteredPrivateCardUsers")
                        .HasColumnType("bit");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetNetworkEnvironment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxTableId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.ToTable("TerminalSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("805774c4-8b08-4055-9eb9-25f8cce4c1ee"),
                            ATGBaudRate = 0,
                            AmountOfFillupKey = 500.00m,
                            BatchCloseTime = new DateTime(2020, 1, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            CCPlatform = "Phillips66",
                            CummulativeRiskAmount = 250.00m,
                            DisableFillupKey = false,
                            ForceRegistry = false,
                            MaximumSaleAmount = 500.00m,
                            MaxiumumOfflineAmount = 250.00m,
                            OfflineSalesOption = true,
                            PrintPvtAccountBalanceOnReceipt = false,
                            ProprietaryCardCode = 0,
                            RegistryMaxLength = 0,
                            RegistryMinLength = 0,
                            RejectUnregisteredNonPrivateCardUsers = true,
                            RejectUnregisteredPrivateCardUsers = true,
                            ScheduleId = new Guid("2f126d7c-bb47-4cb6-b30e-b601d286df6a"),
                            TaxTableId = "1",
                            TerminalId = new Guid("08a028cb-4318-4555-9dea-17ec0ad31b76"),
                            TimeZoneId = "MST"
                        },
                        new
                        {
                            Id = new Guid("b03a284e-df40-42aa-9be8-b1f91c23d3cc"),
                            ATGBaudRate = 0,
                            AmountOfFillupKey = 500.00m,
                            BatchCloseTime = new DateTime(2020, 1, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            CCPlatform = "Phillips66",
                            CummulativeRiskAmount = 250.00m,
                            DisableFillupKey = false,
                            ForceRegistry = false,
                            MaximumSaleAmount = 500.00m,
                            MaxiumumOfflineAmount = 250.00m,
                            OfflineSalesOption = true,
                            PrintPvtAccountBalanceOnReceipt = false,
                            ProprietaryCardCode = 0,
                            RegistryMaxLength = 0,
                            RegistryMinLength = 0,
                            RejectUnregisteredNonPrivateCardUsers = true,
                            RejectUnregisteredPrivateCardUsers = true,
                            ScheduleId = new Guid("2f126d7c-bb47-4cb6-b30e-b601d286df6a"),
                            TaxTableId = "1",
                            TerminalId = new Guid("691f7447-ab56-4821-a193-46e6a055192f"),
                            TimeZoneId = "MST"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovingNetworkName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthResponseData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationTimeout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AuthorizedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AvgPricePerUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancelResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancelResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaptureResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComdataID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomTicketMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DispenserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DispenserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTotalizer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntryMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuerResponseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOnCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptAvailable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettlementResponseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettlementResponseID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettlementResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortableDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTotalizer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TailNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TotalSaleAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TraceNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VolumeGross")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("VolumeNet")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("VolumeUnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Siteminder.API.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Siteminder.API.Entities.VolumeUnits", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<Guid?>("TankId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TankId");

                    b.ToTable("VolumeUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89dfe007-4503-408a-8adb-8b19a91cf290"),
                            Description = "Volume units for US Gallons",
                            Name = "US Gallons"
                        },
                        new
                        {
                            Id = new Guid("6b97f87e-f113-45fe-8d55-12c4f8633746"),
                            Description = "Volume units for Imperial Gallons",
                            Name = "Imperial Gallons"
                        },
                        new
                        {
                            Id = new Guid("b88e6b95-caaf-4b15-9118-76c7bf9fe9c0"),
                            Description = "Volume units for liters",
                            Name = "Liters"
                        });
                });

            modelBuilder.Entity("Siteminder.API.Entities.AssignedTerminals", b =>
                {
                    b.HasOne("Siteminder.API.Entities.CustomerAccount", null)
                        .WithMany("AssignedTerminals")
                        .HasForeignKey("CustomerAccountId");
                });

            modelBuilder.Entity("Siteminder.API.Entities.AuthorizedCard", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Company", "Company")
                        .WithMany("AuthorizedCards")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Siteminder.API.Entities.CompanySiteTypes", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Company", null)
                        .WithMany("CompanySiteTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.Contact", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Company", null)
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Siteminder.API.Entities.ContactType", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId");
                });

            modelBuilder.Entity("Siteminder.API.Entities.CustomerAccount", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Company", null)
                        .WithMany("Accounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.Discount", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Site", "Site")
                        .WithMany("Discounts")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("Siteminder.API.Entities.Dispenser", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Terminal", null)
                        .WithMany("Dispensers")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.DispenserType", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Dispenser", null)
                        .WithMany("DispenserTypes")
                        .HasForeignKey("DispenserId");
                });

            modelBuilder.Entity("Siteminder.API.Entities.Fuel", b =>
                {
                    b.HasOne("Siteminder.API.Entities.FuelType", null)
                        .WithMany("Fuels")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.FuelPump", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Fuel", "Fuel")
                        .WithMany()
                        .HasForeignKey("FuelId");

                    b.HasOne("Siteminder.API.Entities.Terminal", "Terminal")
                        .WithMany("FuelPumps")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("Siteminder.API.Entities.FuelType", b =>
                {
                    b.HasOne("Siteminder.API.Entities.FuelPump", null)
                        .WithMany("FuelTypes")
                        .HasForeignKey("FuelPumpId");
                });

            modelBuilder.Entity("Siteminder.API.Entities.Schedule", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Terminal", null)
                        .WithMany("Schedules")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.ScheduleDetail", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Schedule", null)
                        .WithMany("ScheduleDetails")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.Site", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Company", null)
                        .WithMany("Sites")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Siteminder.API.Entities.SiteType", null)
                        .WithMany("Sites")
                        .HasForeignKey("SiteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.Tank", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Dispenser", null)
                        .WithMany("Tanks")
                        .HasForeignKey("DispenserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.Terminal", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Site", null)
                        .WithMany("Terminals")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.TerminalSettings", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Terminal", null)
                        .WithMany("TerminalSettings")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siteminder.API.Entities.Transaction", b =>
                {
                    b.HasOne("Siteminder.API.Entities.CustomerAccount", null)
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerAccountId");
                });

            modelBuilder.Entity("Siteminder.API.Entities.VolumeUnits", b =>
                {
                    b.HasOne("Siteminder.API.Entities.Tank", null)
                        .WithMany("VolumeUnits")
                        .HasForeignKey("TankId");
                });
#pragma warning restore 612, 618
        }
    }
}
